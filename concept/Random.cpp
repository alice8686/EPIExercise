header:<random>
This header introduces random number generation facilities.

This library allows to produce random numbers using combinations of generators and distributions:
1.Generators: 
Objects that generate uniformly distributed numbers.
2.Distributions: 
Objects that transform 
sequences of numbers generated by a generator 
into ->
sequences of numbers that follow a specific random variable distribution
(such as uniform, Normal or Binomial)

Distribution objects generate random numbers by means of their operator() member, 
which takes a generator object as argument:
/* example1:
std::default_random_engine generator; // a Pseudo-random number engines (instantiations)
std::uniform_int_distribution<int> distribution(1,6);
int dice_roll = distribution(generator);  // generates number in the range 1..6 
*/

For repeated uses, both can be bound together:
/*example2:
auto dice = std::bind ( distribution, generator );
int wisdom = dice()+dice()+dice();
*/


















Except for 'random_device', all standard generators defined in the library are 'random number engines', which are a kind of generators that use a particular algorithm to generate series of 'pseudo-random numbers'. 

These algorithms need a seed as a source of randomness, and this seed can either be a single value or an object with a very specific generate() member function (see seed_seq for more info).

 A typical source of randomness for trivial tasks is time, such as the information provided by time or system_clock::now (for a typical example, see uniform_int_distribution::operator()).
As an alternative, trivial random numbers can also be generated using cstdlib s functions rand and srand.

'Generators'
Pseudo-random number engines (templates)
Generators that use an algorithm to generate pseudo-random numbers based on an initial seed:

linear_congruential_engine
Linear congruential random number engine (class template )
mersenne_twister_engine
Mersenne twister random number engine (class template )
subtract_with_carry_engine
Subtract-with-carry random number engine (class template )

'Engine adaptors'
They adapt an engine, modifying the way numbers are generated with it:

discard_block_engine
Discard-block random number engine adaptor (class template )
independent_bits_engine
Independent-bits random number engine adaptor (class template )
shuffle_order_engine
Shuffle-order random number engine adaptor (class template )

'Pseudo-random number engines (instantiations)'
Particular instantiations of generator engines and adaptors:
//default_random_engine
Default random engine (class )


//Random number generators
Non-deterministic random number generator:
random_device
True random number generator (class )

class
<random>
std::random_device
class random_device;
True random number generator
A random number generator that produces non-deterministic random numbers, if supported.

1.Unlike the other standard generators, this is not meant to be an engine that generates pseudo-random numbers
2.but a generator based on stochastic processes to 
'generate a sequence of uniformly distributed random numbers'. 
3.Although, certain library implementations may lack the ability to produce such numbers and employ a random number engine to generate pseudo-random values instead. In this case, entropy returns zero.

Notice that random devices may not always be available to produce random numbers (and in some systems, they may even never be available). This is signaled by throwing an exception derived from the standard exception on construction or when a number is requested with operator().

Unless the program really requires a stochastic process to generate random numbers, a portable program is encouraged to use an alternate pseudo-random number generator engine instead, or at least provide a recovery method for such exceptions.

Member types
The following alias is a member type of random_device:

'member type'
result_type: unsigned int	The type of the numbers generated.

'Member functions'
(constructor)
Construct random device (public member function)
min
Minimum value (public static member function)
max
Maximum value (public static member function)
unsigned int operator()
Generate random number (public member function)
Returns a new random number.
/*
random_device rd;
cout<<"A ramdom number: "<<rd();
*/
entropy
Return entropy (public member function)

See also
linear_congruential_engine
Linear congruential random number engine (class template )
mersenne_twister_engine
Mersenne twister random number engine (class template )
subtract_with_carry_engine
Subtract-with-carry random number engine (class template )
































*/Distributions
Uniform:
uniform_int_distribution
Uniform discrete distribution (class template )
uniform_real_distribution
Uniform real distribution (class template )


//uniform_int_distribution.........................................................................
template <class IntType = int> class uniform_int_distribution;
//Member types
result_type:The first template parameter (IntType)	The type of the numbers generated (defaults to int)
param_type:	not specified	The type returned by member param.

//Member functions
(constructor):
Construct uniform discrete distribution (public member function)
operator():
Generate random number (public member function)
reset
Reset distribution (public member function)
param
Distribution parameters (public member function)
min
Minimum value (public member function)
max
Maximum value (public member function)

//Distribution parameters:
a
Lower bound of range (public member function)
b
Upper bound of range (public member function)

//Non-member functions
operator<<
Insert into output stream (function template )
operator>>
Extract from input stream (function template )
relational operators
Relational operators (function template )

//Code Example
#include <iostream>
#include <random>

int main()
{
  const int nrolls = 10000; // number of experiments
  const int nstars = 95;    // maximum number of stars to distribute

  std::default_random_engine generator;
  std::uniform_int_distribution<int> distribution(0,9);

  int p[10]={};

  for (int i=0; i<nrolls; ++i) {
    int number = distribution(generator);
    ++p[number];
  }

  std::cout << "uniform_int_distribution (0,9):" << std::endl;
  for (int i=0; i<10; ++i)
    std::cout << i << ": " << std::string(p[i]*nstars/nrolls,'*') << std::endl;

  return 0;
}

Possible output:
uniform_int_distribution (0,9):
0: *********
1: *********
2: *********
3: *********
4: *********
5: *********
6: *********
7: *********
8: *********
9: *********

See also
uniform_real_distribution
Uniform real distribution (class template )
bernoulli_distribution
Bernoulli distribution (class )



Related to Bernoulli (yes/no) trials:
bernoulli_distribution
Bernoulli distribution (class )
binomial_distribution
Binomial distribution (class template )
geometric_distribution
Geometric distribution (class template )
negative_binomial_distribution
Negative binomial distribution (class template )

Rate-based distributions:
poisson_distribution
Poisson distribution (class template )
exponential_distribution
Exponential distribution (class template )
gamma_distribution
Gamma distribution (class template )
weibull_distribution
Weibull distribution (class template )
extreme_value_distribution
Extreme Value distribution (class template )

Related to Normal distribution:
normal_distribution
Normal distribution (class template )
lognormal_distribution
Lognormal distribution (class template )
chi_squared_distribution
Chi-squared distribution (class template )
cauchy_distribution
Cauchy distribution (class template )
fisher_f_distribution
Fisher F-distribution (class template )
student_t_distribution
Student T-Distribution (class template )

Piecewise distributions:
discrete_distribution
Discrete distribution (class template )
piecewise_constant_distribution
Piecewise constant distribution (class template )
piecewise_linear_distribution
Piecewise linear distribution (class template )

Other
seed_seq
Seed sequence (class )
generate_canonical
Generate canonical numbers (function template )